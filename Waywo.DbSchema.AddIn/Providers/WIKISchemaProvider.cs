using EnvDTE;
using Microsoft.Dynamics.Framework.Tools.MetaModel.Automation.Analytics;
using Microsoft.Dynamics.Framework.Tools.MetaModel.Automation.DataEntityViews;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Waywo.DbSchema.Model;
using static System.Windows.Forms.AxHost;

namespace Waywo.DbSchema.Providers
{
    public class WIKISchemaProvider : ISchemaProvider
    {
        protected readonly IDataModelProvider provider;

        public WIKISchemaProvider(IDataModelProvider provider)
        {
            this.provider = provider;
        }

        public bool StandardFields { get; set; }
        public bool ExtensionFields { get; set; }
        public bool MarkMandatory { get; set; }

        public string GetSchema()
        {
            provider.GenerateDataModel();

            StringBuilder wiki = new StringBuilder();
            wiki.AppendLine(">This markdown was generated by [waywo.co.uk](https://waywo.co.uk/2021/12/20/entity-relationship-diagrams/).  Paste it straight into an Azure DevOps WIKI page!");
            wiki.AppendLine();

            wiki.AppendLine("[[_TOC_]]");

            foreach (var table in provider.DataModel.Tables)
            {
                wiki.AppendLine($"#{table.Name}");
                wiki.AppendLine($"{table.Description}");
                wiki.AppendLine();
                wiki.AppendLine("##Properties");
                wiki.AppendLine("|**Property**|**Value**|");
                wiki.AppendLine("|--|--|");
                foreach (var property in table.Properties)
                {
                    wiki.AppendLine($"|{property.Key}|{property.Value}");
                }
                if (table.Fields.Exists(f => f.IsClusteredIndex == true))
                {
                    wiki.Append("|Clustered|");
                    foreach (var clusteredField in table.Fields.Where(f => f.IsClusteredIndex == true))
                    {
                        wiki.Append(string.Format("{0} ", clusteredField.Name));
                    }
                    wiki.AppendLine("|");
                }
                wiki.AppendLine();
                wiki.AppendLine("##Fields");
                wiki.AppendLine();

                if (!MarkMandatory)
                {
                    wiki.AppendLine("|**Name**|**Type**|**Key**|");
                    wiki.AppendLine("|--|--|--|");
                }
                else
                {
                    wiki.AppendLine("|**Name**|**Type**|**Key**|**Mandatory**|");
                    wiki.AppendLine("|--|--|--|--|");
                }


                foreach (var field in table.Fields.OrderBy(f => f.KeyType) // First, group by KeyType
                    .ThenBy(f => MarkMandatory ? (f.IsMandatory ? 0 : 1) : 0) // Sort by IsMandatory if MarkMandatory is true
                    .ThenBy(f => f.Name))
                {
                    //Always include key fields
                    if ((field.KeyType == KeyType.Primary
                        || field.KeyType == KeyType.Surrogate
                        || provider.DataModel.Relations.Exists(r => (r.FromTableName == table.Name || r.ToTableName == table.Name) &&
                                                                    (r.FromTableField == field.Name || r.ToTableField == field.Name)))
                        ||
                        (field.IsExtension && this.ExtensionFields)
                        ||
                        (!field.IsExtension && this.StandardFields)
                    )
                    {
                        wiki.AppendLine(FormatField(field));
                    }
                }
                wiki.AppendLine();

            }

            return wiki.ToString();
        }

        private string FormatField(Field field)
        {
            // Add simple fields as necessary
            var data = new List<string>
            {
                field.Name,
                field.DataType
            };

            // Handle fields which have additional properties in output -->
            var columnSettings = new List<string>();

            if (field.KeyType == KeyType.Primary || field.KeyType == KeyType.Surrogate)
            {
                columnSettings.Add("Yes");
            }
            else
            {
                columnSettings.Add("");
            }

            if (MarkMandatory)
            {
                if (field.IsMandatory)
                {
                    columnSettings.Add("Yes");
                }
                else
                {
                    columnSettings.Add("");
                }
            }
            // <--

            var columnSettingStr = columnSettings.Count > 0 ? $"{string.Join("|", columnSettings)}" : string.Empty;

            if (!string.IsNullOrEmpty(columnSettingStr))
            {
                data.Add(columnSettingStr);
            }

            return "|" + string.Join("|", data) + "|";
        }
    }
}
